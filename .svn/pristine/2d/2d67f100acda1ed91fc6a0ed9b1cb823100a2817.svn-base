<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport"
          content="maximum-scale=1.0,minimum-scale=1.0,user-scalable=0,width=device-width,initial-scale=1.0"/>
    <meta name="format-detection" content="telephone=no,email=no,date=no,address=no">
    <title>Vue新页面模板</title>
    <link rel="stylesheet" type="text/css" href="../css/api.css"/>
    <!--AUI根据使用情况引入-->
    <link rel="stylesheet" type="text/css" href="../css/2_0/aui_2_0.css"/>
    <link rel="stylesheet" type="text/css" href="../css/2_0/rem.css"/>
    <link rel="stylesheet" type="text/css" href="../css/2_0/util.css"/>
    <link rel="stylesheet" type="text/css" href="../css/fonts/duola_iconfont2.css"/>
    <style>
        html, body{
            background: transparent;
            padding: 0rem;
            margin: 0rem
        }
        .shadow-l{
            background-color: #ECECEC;
            height: 0.5rem;
        }
        .shadow-s{
            background-color: #ECECEC;
            height: 1px;
        }
    </style>
</head>
<body>
<div id="app" v-cloak v-if="showApp">
</div>
<script type="text/javascript" src="../script/api.js"></script>
<script type="text/javascript" src="../script/url.js"></script>
<script type="text/javascript" src="../script/uz.js"></script>
<script type="text/javascript" src="../script/umeng_sdk.js"></script>
<script type="text/javascript" src="../script/vue/vue.min.js"></script>
<script type="text/javascript">
    var vm;
    apiready = function () {
        vm = new Vue({
            el: '#app',
            data: {
                showApp: true
            },
            mounted: function () {
//                挂载成功  逻辑代码执行入口
                var self = this;
                self.init();
            },
            beforeUpdate: function () {
//                数据发生变化时，更新界面前的回调
                var self = this;
            },
            updated: function () {
//                数据发生变化时，更新界面结束的回调  不要做数据修改操作  否则会发生死循环
                var self = this;
            },
            methods: {
                init: function () {
//                    初始化方法  只执行一次
                    var self = this;
//                    初始化监听
                    self.setEventListener();
//                    初始化下拉刷新 根据需求选择调用
                    self.initRefreshHeaderInfo();

                },
                initRefreshHeaderInfo: function () {
                    api.setRefreshHeaderInfo({
                        visible: true,
                        loadingImg: 'widget://image/refresh.png',
                        bgColor: 'rgba(245, 245, 245, 1.0)',
                        textDown: '下刷新',
                        textUp: '松刷新',
                        showTime: true
                    }, function(ret, err){
                        if(ret){
//                            改变下拉刷新状态
//                            api.refreshHeaderLoading();
//                            api.refreshHeaderLoadDone();
                        }
                    });
                },
                setEventListener: function () {
//                    初始化时设置监听事件
                    var self = this;
                    api.addEventListener({
                        name:'pause'
                    }, function(ret, err){
                        alert('应用进入后台');
                        self.pause();

                    });
                    api.addEventListener({
                        name:'resume'
                    }, function(ret, err){
                        alert('应用回到前台');
                        self.resume();
                    });
                    api.addEventListener({
                        name:'scrolltobottom',
                        extra:{
                            threshold:0            //设置距离底部多少距离时触发，默认值为0，数字类型
                        }
                    }, function(ret, err){
                        alert('已滚动到底部');
                    });
                    api.addEventListener({
                        name:'offline'
                    }, function(ret, err){
                        alert('断网了');
                    });
                    api.addEventListener({
                        name:'online'
                    }, function(ret, err){
                        alert('已连接到网络');
                    });

                },
                start: function () {
//                    初始化后执行
                    var self = this;

                },
                pause: function () {
//                    页面进入后台时进行，但未关闭时进行相关操作时调用
                    var self = this;

                },
                resume: function () {
//                    页面在后台状态时，需要操作时调用
                    var self = this;

                },
                destroy: function(){
//                  销毁界面时调用
                }
            },
            computed: {

            }
        })
    }
//    用于apicloud的execScript方法调用Vue中各个生命周期中的方法
    function start() {
        vm.start();
    }
    function resume() {
        vm.resume();
    }
    function pause() {
        vm.pause();
    }

</script>
</body>
</html>